{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAEpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,IAEAC,G,GAEDJ,E,IAKL,OAHAC,EACGQ,MAAK,W,OAAMhB,EAAAiB,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IACtEa,OAAI,W,OAAMpB,EAAAiB,OAAOI,QAAQ,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAClEC,C,CAkBTN,EAAKoB,iBAAiB,UAftB,SAAsBC,GACpBA,EAAMC,iBAON,IANA,IAAMC,EAAaC,OAAOxB,EAAKE,cAAc,yBAAyBuB,OAChEC,EAAYF,OAAOxB,EAAKE,cAAc,wBAAwBuB,OAC9DE,EAASH,OAAOxB,EAAKE,cAAc,0BAA0BuB,OAE/DpB,EAAQkB,EACNK,EAAW,GACRxB,EAAW,EAAGA,GAAYuB,EAAQvB,IAAY,CACrD,IAAME,EAAUH,EAAcC,EAAUC,GACxCuB,EAASC,KAAKvB,GACdD,GAASqB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix, { Notify } from 'notiflix';\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve();\n      } else {\n        reject();\n      }\n    }, delay);\n  });\n  promise\n    .then(() => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n    .catch(() => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n  return promise;\n}\n\nfunction startPromise(event) {\n  event.preventDefault();\n  const firstDelay = Number(form.querySelector('input[name = \"delay\"]').value);\n  const delayStep = Number(form.querySelector('input[name = \"step\"]').value);\n  const amount = Number(form.querySelector('input[name = \"amount\"]').value);\n\n  let delay = firstDelay;\n  const promises = [];\n  for (let position = 1; position <= amount; position++) {\n    const promise = createPromise(position, delay);\n    promises.push(promise);\n    delay += delayStep;\n  }\n}\n\nform.addEventListener(\"submit\", startPromise);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","promise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","concat","catch","failure","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","amount","promises","push"],"version":3,"file":"03-promises.b957ef5c.js.map"}